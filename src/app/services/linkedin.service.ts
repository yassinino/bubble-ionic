import { HttpHeaders } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { HTTP } from "@ionic-native/http/ngx";
import { environment } from "src/environments/environment";
@Injectable({
  providedIn: "root"
})


export class LinkedinService {
  constructor(private http: HTTP) { }
  
  getRandomState() {
    var text = "";
    var possible =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    for (var i = 0; i < 7; i++)
      text += possible.charAt(Math.floor(Math.random() * possible.length));
    return text;
  }

  getAccessToken(authCode) {
    const body = {
      grant_type: "authorization_code",
      code: authCode,
      redirect_uri: "http://localhost:8100/callback",
      client_id: environment.linkedinClientId,
      client_secret: environment.linkedinClientSecret
    };
    const headers = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    return this.http.post(
      "https://www.linkedin.com/oauth/v2/accessToken",
      body,
      headers
    );
  }
  getName(accessToken) {
    const headers = {
      Authorization: `Bearer ${accessToken}`
    };
    return new Promise((resolve, reject) => {
      this.http
        .get("https://api.linkedin.com/v2/me", {}, headers)
        .then(profile => {
          const parsedProfile = JSON.parse(profile.data);
          resolve(parsedProfile);
        })
        .catch(err => {
          console.error(err);
          reject("Error. Couldn't fetch name");
        });
    });
  }
  getProfilePic(accessToken) {
    const headers = {
      Authorization: `Bearer ${accessToken}`
    };
    return new Promise((resolve, reject) => {
      this.http
        .get(
          "https://api.linkedin.com/v2/me?projection=(id,profilePicture(displayImage~:playableStreams))",
          {},
          headers
        )
        .then(res => {
          const parsedResponse = JSON.parse(res.data);
          resolve(
            parsedResponse["profilePicture"]["displayImage~"].elements[0]
              .identifiers[0]
          );
        })
        .catch(err => {
          reject("Error getting profile pic");
        });
    });
  }


  getLocation(accessToken) {
    const headers = {
      Authorization: `Bearer ${accessToken}`
    };
    return new Promise((resolve, reject) => {
      this.http
        .get(
          "https://api.linkedin.com/v2/me?projection=(geoLocation(geo~,autoGenerated))",
          {},
          headers
        )
        .then(res => {
          const parsedResponse = JSON.parse(res.data);
          console.log(parsedResponse)
          resolve(
            parsedResponse
          );
        })
        .catch(err => {
          console.log("error"  + err)
        });
    });
  }

  getEmail(accessToken) {
    const headers = {
      Authorization: `Bearer ${accessToken}`
    };
    return new Promise((resolve, reject) => {
      this.http
        .get(
          "https://api.linkedin.com/v2/clientAwareMemberHandles?q=members&projection=(elements*(primary,type,handle~))",
          {},
          headers
        )
        .then(data => {
          const parsedData = JSON.parse(data.data);
          resolve(parsedData.elements[0]["handle~"]);
        })
        .catch(err => {
          reject(err);
        });
    });
  }
}